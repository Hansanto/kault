package io.github.hansanto.kault.auth.approle.payload

import io.github.hansanto.kault.extension.toJsonString
import io.github.hansanto.kault.serializer.VaultDuration
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer

@Serializable
public data class GenerateSecretIDPayload(

    /**
     * Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext.
     */
    @SerialName("metadata")
    var metadata: String? = null,

    /**
     * Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If secret_id_bound_cidrs is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.
     */
    @SerialName("cidr_list")
    var cidrList: List<String>? = null,

    /**
     * Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this SecretID. Overrides any role-set value but must be a subset.
     */
    @SerialName("token_bound_cidrs")
    var tokenBoundCidrs: List<String>? = null,

    /**
     * Number of times this SecretID can be used, after which the SecretID expires. A value of zero will allow unlimited uses. Overrides secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses.
     */
    @SerialName("num_uses")
    var numUses: Long? = null,

    /**
     * Duration in seconds (3600) or an integer time unit (60m) after which this SecretID expires. A value of zero will allow the SecretID to not expire. Overrides secret_id_ttl role option when supplied. May not be longer than role's secret_id_ttl.
     */
    @SerialName("ttl")
    var ttl: VaultDuration? = null
) {

    /**
     * Sets the metadata field from a map and converts it to a JSON string.
     *
     * @param metadata A map containing key-value pairs of metadata.
     */
    public fun metadata(metadata: Map<String, String>) {
        this.metadata = metadata.toJsonString(String.serializer(), String.serializer())
    }
}
